const os = require("os");
const moment = require("moment-timezone");
const startTime = new Date();

module.exports = {
  config: {
    name: "uptime",
    version: "3.0.0",
    hasPermssion: 0,
    credits: "SHAHADAT SAHU",
    description: "Show system info and uptime with stylish SYSTEM STATUS box",
    commandCategory: "system",
    usages: "uptime",
    prefix: false,
    cooldowns: 5
  },

  run: async function ({ api, event }) {
    const { threadID, messageID } = event;

    try {
      // Step 1: Initial progress bar
      api.sendMessage("‚è≥ Loading system status...", threadID, async (err, info) => {
        if (err) return console.error(err);
        let msgID = info.messageID;

        const steps = [
          { bar: "‚ñè‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñï", percent: "10%" },
          { bar: "‚ñè‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñï", percent: "40%" },
          { bar: "‚ñè‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñï", percent: "70%" },
          { bar: "‚ñè‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñï", percent: "100%" },
        ];

        for (const step of steps) {
          await new Promise(r => setTimeout(r, 700));
          try {
            await api.editMessage(`${step.bar} ${step.percent}`, msgID);
          } catch (e) {
            await api.unsendMessage(msgID);
            const newMsg = await api.sendMessage(`${step.bar} ${step.percent}`, threadID);
            msgID = newMsg.messageID;
          }
        }

        // Step 2: Prepare system info
        const uptimeSec = (new Date() - startTime) / 1000;
        const days = Math.floor(uptimeSec / 86400);
        const hours = Math.floor((uptimeSec % 86400) / 3600);
        const minutes = Math.floor((uptimeSec % 3600) / 60);
        const seconds = Math.floor(uptimeSec % 60);
        const uptimeFormatted = `${days}d ${hours}h ${minutes}m ${seconds}s`;

        const totalMem = os.totalmem() / 1073741824;
        const freeMem = os.freemem() / 1073741824;
        const usedMem = totalMem - freeMem;
        const usedPercent = ((usedMem / totalMem) * 100).toFixed(1);

        const cpu = os.cpus()[0];
        const now = moment.tz("Asia/Dhaka");
        const ping = Math.floor(Math.random() * 200) + 50;
        let pingStatus = ping < 100 ? "‚ö° Ultra Fast" : ping < 200 ? "üöÄ Stable" : ping < 400 ? "‚ö†Ô∏è Normal" : "üê¢ Slow";
        const status = usedPercent < 70 ? "‚úÖ SYSTEM STABLE" : usedPercent < 90 ? "‚ö†Ô∏è HIGH LOAD" : "‚õî CRITICAL";

        // Step 3: Stylish SYSTEM STATUS Box
        const finalMsg = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚öôÔ∏è ùó¶ùó¨ùó¶ùóßùóòùó† ùó¶ùóßùóîùóßùó®ùó¶ ‚öôÔ∏è 
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üëë OWNER: ùêíùêáùêÄùêáùêÄùêÉùêÄùêì ùêíùêÄùêáùêî
‚ïë ü§ñ BOT: ‚îÄÍØ≠‚îÄ‚Éù‚Äå‚Äåùêíùê°ùêöùê°ùêöùêùùêöùê≠ ùêÇùê°ùêöùê≠ ùêÅùê®ùê≠
‚ïë üïê START TIME: ${startTime.toLocaleString()}
‚ïë ‚è∞ UPTIME: ${uptimeFormatted}
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üíª OS: ${os.type()} ${os.arch()}
‚ïë üß† CPU: ${cpu.model}
‚ïë ‚öôÔ∏è SPEED: ${cpu.speed} MHz
‚ïë üî¢ CORES: ${os.cpus().length}
‚ïë üíæ RAM: ${usedMem.toFixed(2)} GB / ${totalMem.toFixed(2)} GB (${usedPercent}%)
‚ïë üß© NODE: ${process.version}
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üìÖ DATE: ${now.format("DD MMMM YYYY")}
‚ïë ‚è∞ TIME: ${now.format("hh:mm:ss A")}
‚ïë üì° PING: ${ping}ms (${pingStatus})
‚ïë üß≠ STATUS: ${status}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`;

        // Step 4: Send final SYSTEM STATUS message
        await new Promise(r => setTimeout(r, 1000));
        try {
          await api.editMessage(finalMsg, msgID);
        } catch (e) {
          await api.unsendMessage(msgID);
          await api.sendMessage(finalMsg, threadID);
        }
      });
    } catch (error) {
      console.error("Uptime command error:", error);
      await api.sendMessage("‚ö†Ô∏è Something went wrong! Contact admin SAHU.", threadID);
    }
  }
};